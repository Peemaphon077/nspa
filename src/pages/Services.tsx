import { useEffect, useState, type CSSProperties } from 'react'
import { fetchServices, type Service } from '../lib/service'
import { supabase } from '../lib/supabaseClient'
import { useAuth } from '../hooks/useAuth'
import { isOwner } from '../lib/isOwner'
import { useNavigate, useSearchParams } from 'react-router-dom'

export default function Services() {
  const [data, setData] = useState<Service[]>([])
  const [loading, setLoading] = useState(true)
  const [err, setErr] = useState<string | null>(null)

  const [editMode, setEditMode] = useState(false)
  const [form, setForm] = useState<Partial<Service>>({})
  const [busy, setBusy] = useState(false)

  const { user } = useAuth()
  const owner = isOwner(user?.email)

  const navigate = useNavigate()
  const [search] = useSearchParams()

  // ‚úÖ Debug log ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á deploy)
  useEffect(() => {
    console.log('üîé owner:', owner)
    console.log('üîé edit param:', search.get('edit'))
  }, [owner, search])

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á + ‡∏°‡∏µ ?edit=1
  useEffect(() => {
    if (owner && search.get('edit') === '1') {
      setEditMode(true)
    }
  }, [owner, search])

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    (async () => {
      try {
        setData(await fetchServices())
      } catch (e: any) {
        setErr(e?.message ?? 'error')
      } finally {
        setLoading(false)
      }
    })()
  }, [])

  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î realtime: refetch ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  useEffect(() => {
    const ch = supabase
      .channel('services-rt')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'services' }, async () => {
        try {
          const fresh = await fetchServices()
          setData(fresh)
        } catch (e: any) {
          setErr(e?.message ?? 'error')
        }
      })
      .subscribe()
    return () => { supabase.removeChannel(ch) }
  }, [])

  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Edit ‚Üí ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏û‡∏£‡πâ‡∏≠‡∏° redirect ‡πÅ‡∏•‡∏∞ edit=1
  const onClickEdit = () => {
    const safeRedirect = encodeURIComponent('/services?edit=1')
    navigate(`/login?redirect=${safeRedirect}`)
  }

  const onExitEdit = () => {
    setEditMode(false)
    setForm({})
  }

  // ‚úÖ CRUD ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner + editMode ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const upsert = async () => {
    if (!(owner && editMode)) return
    setBusy(true); setErr(null)
    const payload: any = {
      id: form.id,
      name: form.name,
      price: Number(form.price),
      duration_min: Number(form.duration_min),
      description: form.description ?? null,
    }
    const { error } = await supabase.from('services').upsert(payload)
    setBusy(false)
    if (error) setErr(error.message)
    setForm({})
  }

  const editRow = (s: Service) => {
    if (!(owner && editMode)) return
    setForm(s)
  }

  const del = async (id: string) => {
    if (!(owner && editMode)) return
    if (!confirm('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?')) return
    const { error } = await supabase.from('services').delete().eq('id', id)
    if (error) setErr(error.message)
  }

  // ---------- styles ----------
  const field: CSSProperties = {
    width: '100%',
    padding: 12,
    borderRadius: 10,
    border: '1px solid rgba(255,255,255,0.25)',
    background: 'rgba(255,255,255,0.08)',
    color: 'white',
    outline: 'none',
    boxSizing: 'border-box'
  }
  const card: CSSProperties = {
    background: 'rgba(0,0,0,0.5)',
    borderRadius: 16,
    maxWidth: 900,
    margin: '12px auto',
    padding: 32
  }

  if (loading) return <div style={{ padding: 24 }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‚Ä¶</div>
  if (err) return <div style={{ padding: 24, color: 'crimson' }}>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {err}</div>

  return (
    <div
      style={{
        padding: 24,
        minHeight: '100vh',
        backgroundImage: 'url("/barber-bg.jpg")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        color: 'white',
        textShadow: '0 2px 8px rgba(0,0,0,0.7)',
      }}
    >
      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£/‡∏≠‡∏≠‡∏Å */}
      <div style={{ maxWidth: 900, margin: '0 auto', display: 'flex', justifyContent: 'flex-end', gap: 8 }}>
        {!editMode ? (
          <button onClick={onClickEdit}>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô</button>
        ) : (
          <button onClick={onExitEdit}>‡∏≠‡∏≠‡∏Å</button>
        )}
      </div>

      <div style={card}>
        <h1>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô</h1>

        {/* ‚úÖ ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡πÄ‡∏û‡∏¥‡πà‡∏° - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner + editMode */}
        {owner && editMode && (
          <div
            style={{
              background: 'rgba(0,0,0,0.35)',
              border: '1px solid rgba(255,255,255,0.2)',
              borderRadius: 12,
              padding: 16,
              margin: '12px 0',
            }}
          >
            <h3 style={{ marginTop: 0 }}>{form.id ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà'}</h3>

            <div style={{ display: 'grid', gap: 12, width: '100%' }}>
              <input
                style={field}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
                value={form.name ?? ''}
                onChange={(e) => setForm((f) => ({ ...f, name: e.target.value }))}
              />
              <input
                style={field}
                type="number"
                placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)"
                value={form.price ?? ''}
                onChange={(e) => setForm((f) => ({ ...f, price: e.target.value as any }))}
              />
              <input
                style={field}
                type="number"
                placeholder="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)"
                value={form.duration_min ?? ''}
                onChange={(e) => setForm((f) => ({ ...f, duration_min: e.target.value as any }))}
              />
              <textarea
                style={{ ...field, minHeight: 96, resize: 'vertical' }}
                placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                value={form.description ?? ''}
                onChange={(e) => setForm((f) => ({ ...f, description: e.target.value }))}
              />
              <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
                <button onClick={upsert} disabled={busy}>
                  {form.id ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'}
                </button>
                {form.id && (
                  <button onClick={() => setForm({})} type="button">
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                )}
              </div>
            </div>
          </div>
        )}

        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ */}
        <div style={{ display: 'grid', gap: 16 }}>
          {data.map((s) => (
            <div
              key={s.id}
              style={{ border: '1px solid #eee', borderRadius: 8, padding: 16, background: 'rgba(0,0,0,0.3)' }}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <h3 style={{ margin: 0 }}>{s.name}</h3>
                {owner && editMode && (
                  <div style={{ display: 'flex', gap: 8 }}>
                    <button onClick={() => editRow(s)}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                    <button onClick={() => del(s.id)} style={{ color: 'crimson' }}>
                      ‡∏•‡∏ö
                    </button>
                  </div>
                )}
              </div>
              <p>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {s.duration_min} ‡∏ô‡∏≤‡∏ó‡∏µ</p>
              <p>‡∏£‡∏≤‡∏Ñ‡∏≤: {s.price} ‡∏ö‡∏≤‡∏ó</p>
              {s.description && <p>{s.description}</p>}
            </div>
          ))}
          {data.length === 0 && <div>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</div>}
        </div>
      </div>
    </div>
  )
}
